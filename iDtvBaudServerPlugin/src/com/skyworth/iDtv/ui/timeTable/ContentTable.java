package com.skyworth.iDtv.ui.timeTable;import java.awt.Component;import java.awt.Dimension;import java.awt.Font;import java.awt.Point;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import javax.swing.JFrame;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPopupMenu;import javax.swing.JTable;import javax.swing.Timer;import javax.swing.table.JTableHeader;import javax.swing.table.TableColumn;import javax.swing.table.TableColumnModel;import javax.swing.table.TableModel;import com.skyworth.iDtv.dao.DeviceStatue;import com.skyworth.iDtv.dao.TimeTableStatue;import com.skyworth.iDtv.dao.UserStatue;import com.skyworth.iDtv.entity.DeviceData;import com.skyworth.iDtv.entity.TimeTableData;import com.skyworth.iDtv.entity.UserData;import com.skyworth.iDtv.ui.resource.ZResourceUtils;public class ContentTable extends JTable {    public class DisposePopupActionHandler implements ActionListener {        @Override        public void actionPerformed(ActionEvent e) {            if (hintCell == null) {                return;            }            Object value = getValueAt(hintCell.x, hintCell.y);            TimeTableCellData timeTableDatas = (TimeTableCellData) value;            TimeTableCellToolTip popup = getHintPopup(timeTableDatas                    .getReserveDatas());            popup.setVisible(false);        }    }    public class ShowPopupActionHandler implements ActionListener {        @Override        public void actionPerformed(ActionEvent e) {            if (hintCell != null) {                disposeTimer.stop();                Object value = getValueAt(hintCell.x, hintCell.y);                TimeTableCellData timeTableCellData = (TimeTableCellData) value;                TimeTableCellToolTip popup;                if (timeTableCellData == null) {                    popup = getHintPopup(null);                } else {                    List<ReserveData> reserveDatas = timeTableCellData                            .getReserveDatas();                    popup = getHintPopup(reserveDatas);                }                popup.setVisible(false);                Rectangle bounds = getCellRect(hintCell.x, hintCell.y, true);                int x = bounds.x;                int y = bounds.y;                popup.show(ContentTable.this, x, y);                int popupWidth = popup.getWidth();                int popupHeight = popup.getHeight();                x = x + (bounds.width - popupWidth) / 2;                y = y + (bounds.height - popupHeight) / 2;                popup.show(ContentTable.this, x, y);                disposeTimer.start();            }        }    }    private static final long serialVersionUID = 2567665465083658399L;    private Timer showTimer;    private Timer disposeTimer;    private Point hintCell;    private TimeTableCellToolTip popup; // Inherits from JPopupMenu    private HashMap<List<ReserveData>, TimeTableCellToolTip> hashMap = new HashMap<List<ReserveData>, TimeTableCellToolTip>();    private JFrame parentFrame;    public ContentTable(JFrame parentFrame, TableModel dm) {        super(dm);        this.parentFrame = parentFrame;        initComponents();        loadAction();    }    protected TimeTableCellToolTip getHintPopup(List<ReserveData> timeTableDatas) {        TimeTableCellToolTip timeTableCellToolTip = hashMap.get(timeTableDatas);        if (timeTableCellToolTip == null) {            popup = new TimeTableCellToolTip(timeTableDatas);            hashMap.put(timeTableDatas, popup);        }        return popup;    }    private void initComponents() {        setAlignmentX(Component.RIGHT_ALIGNMENT);        setAutoCreateRowSorter(true);        setRowSelectionAllowed(false);        setRequestFocusEnabled(false);        setOpaque(false);        setCellSelectionEnabled(true);        setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);        setRowHeight(40);        getTableHeader().setReorderingAllowed(false);        setDefaultRenderer(Object.class, new ContentTableRender());    }    private void loadAction() {        showTimer = new Timer(1000, new ShowPopupActionHandler());        showTimer.setRepeats(false);        showTimer.setCoalesce(true);        disposeTimer = new Timer(1000, new DisposePopupActionHandler());        disposeTimer.setRepeats(false);        disposeTimer.setCoalesce(true);        this.addMouseMotionListener(new MouseAdapter() {            @Override            public void mouseMoved(MouseEvent e) {                Point p = e.getPoint();                int row = rowAtPoint(p);                int col = columnAtPoint(p);                if ((row > -1 && row < getRowCount())                        && (col > -1 && col < getColumnCount())) {                    if (hintCell == null                            || (hintCell.x != row || hintCell.y != col)) {                        hintCell = new Point(row, col);                        showTimer.restart();                    }                } else {                    showTimer.stop();                }            }            @Override            public void mouseExited(MouseEvent e) {                // System.out.print("mouseExited: ");                Point p = e.getPoint();                int row = rowAtPoint(p);                int col = columnAtPoint(p);                System.out.println(row + " " + col);                if ((row > -1 && row < getRowCount())                        && (col > -1 && col < getColumnCount())) {                    Object valueAt = getValueAt(row, col);                    TimeTableCellData timeTableDatas = (TimeTableCellData) valueAt;                    List<ReserveData> reserveDatas = timeTableDatas                            .getReserveDatas();                    TimeTableCellToolTip popup = getHintPopup(reserveDatas);                    popup.setVisible(false);                }            }        });        this.addMouseListener(new MouseAdapter() {            @Override            public void mouseClicked(MouseEvent e) {                // System.out.println("mouseClicked");                if (e.getButton() == MouseEvent.BUTTON3) {                    ContentTable table = (ContentTable) e.getSource();                    // System.out.println("right click");                    int rowIndexStart = table.getSelectedRow();                    int rowIndexEnd = table.getSelectionModel()                            .getMaxSelectionIndex();                    int colIndexStart = table.getSelectedColumn();                    int colIndexEnd = table.getColumnModel()                            .getSelectionModel().getMaxSelectionIndex();                    List<Point> points = new ArrayList<Point>();                    for (int i = rowIndexStart; i <= rowIndexEnd; i++) {                        for (int j = colIndexStart; j <= colIndexEnd; j++) {                            if (table.isCellSelected(i, j)) {                                points.add(new Point(i, j));                            }                        }                    }                    if (points.size() > 0) {                        List<TimeTableCellData> lists = new ArrayList<TimeTableCellData>();                        for (Point point : points) {                            TimeTableCellData timeTableDatas = (TimeTableCellData) table                                    .getModel().getValueAt(point.x, point.y);                            lists.add(timeTableDatas);                        }                        JPopupMenu popupMenu2 = getContentTablePopupMenu(lists);                        showTimer.stop();                        popupMenu2.show(table, e.getX(), e.getY());                    }                } else if (e.getClickCount() == 2) {                    detailMenuItemActionPerformed();                }                // TODO 只要点击，禁止显示tooltip            }        });    }    /**     * 创建右键弹出菜单<br>     * 由于选择多个单元格时，无法保存菜单，所有的菜单都需要动态产生。<br>     * 为了展现实用性更强的界面，需要采用OSNG<br>     * 设备不启用：需要联系manager<br>     * 设备启用：需要判断user状态: ①user全部预定 显示取消预定 ②user部分已预定，显示预定剩余和取消已预订     * ③user全部没有预定，显示预定和预定全部<br>     *     * @param lists     * @return     */    private JPopupMenu getContentTablePopupMenu(List<TimeTableCellData> lists) {        // initialization all menu        JPopupMenu popupMenu2 = new JPopupMenu();        JMenuItem reserverMenuItem = new JMenuItem();        reserverMenuItem.setText(ZResourceUtils.getLabel("reserver"));        reserverMenuItem.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                reserveMenuItemActionPerformed(e);            }        });        JMenuItem cancelReserverMenuItem = new JMenuItem();        cancelReserverMenuItem.setText(ZResourceUtils                .getLabel("cancelReserver"));        cancelReserverMenuItem.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                cancelReserveMenuItemActionPerformed(e);            }        });        JMenuItem connectReserverManItem = new JMenuItem();        connectReserverManItem.setText(ZResourceUtils                .getLabel("connectReserverMan"));        connectReserverManItem.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                connectReserveManItemActionPerformed(e);            }        });        JMenuItem detailMenuItem = new JMenuItem();        detailMenuItem.setText(ZResourceUtils.getLabel("reserverDetail"));        detailMenuItem.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                detailMenuItemActionPerformed();            }        });        JMenuItem connectManagerItem = new JMenuItem();        connectManagerItem.setText(ZResourceUtils.getLabel("connectManager"));        connectManagerItem.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                connectManagerItemActionPerformed(e);            }        });        // check login if not refuse        if (!UserStatue.checkLogin(parentFrame)) {            popupMenu2.add(connectManagerItem);            return popupMenu2;        }        // load menu according different condition        // 1. not full : reserve        // 2.        if (!(lists == null || lists.size() == 0)) {            boolean timeFull = true;            int countEnable = 0;            int countBelongToUser = 0;            int countAll = 0;            int countNotEarly = 0;            for (int i = 0; i < lists.size(); i++) {                TimeTableCellData timeTableCellData = lists.get(i);                int count = timeTableCellData                        .countOfReserveDatasBelongToUser(UserStatue                                .getCurrentUser());                countBelongToUser += count;                if (!(timeTableCellData.isTimeFull())) {                    timeFull = false;                }                countAll += timeTableCellData.countOfReserverDatas();                countNotEarly += timeTableCellData                        .countOfReserverDatasAfterNow();                int deviceId = timeTableCellData.getDeviceId();                DeviceData deviceData = DeviceStatue.finDeviceDataById(deviceId);                if (deviceData!=null) {					if (deviceData.getUsable()==1) {						countEnable++;					}				}            }            if (countEnable == 0) {                popupMenu2.add(connectManagerItem);                return popupMenu2;            }            if (countNotEarly > 0 || countAll == 0) {                if (!timeFull) {                    popupMenu2.add(reserverMenuItem);                }                if (countBelongToUser > 0) {                    popupMenu2.add(cancelReserverMenuItem);                }            }            if (countAll > 0) {                popupMenu2.add(detailMenuItem);            }            popupMenu2.addSeparator();            if (countAll > 0 && countAll - countBelongToUser > 0) {                popupMenu2.add(connectReserverManItem);            }            popupMenu2.add(connectManagerItem);        }        return popupMenu2;    }    public void detailMenuItemActionPerformed() {        List<TimeTableCellData> timeTableCellDatas = getSelectedCellDataList();        ReserveAssist reserveAssist = new ReserveAssist();        reserveAssist.showDetailResrverDialog(parentFrame, "detail",                timeTableCellDatas);    }    protected void connectManagerItemActionPerformed(ActionEvent e) {        List<UserData> userDatas = UserStatue.getManagerUser();        if (userDatas == null || userDatas.size() == 0) {            JOptionPane.showMessageDialog(null, "manager info empty!");            return;        }        if (userDatas.size() > 1) {            QQConnect.show(parentFrame, userDatas);        } else {            UserData userData = userDatas.get(0);            String qq = userData.getQq();            QQConnect.chatWithQQ(qq);        }    }    private List<TimeTableCellData> getSelectedCellDataList() {        int[] selectedRows = this.getSelectedRows();        int[] selectedColumns = this.getSelectedColumns();        List<TimeTableCellData> timeTableCellDatas = new ArrayList<TimeTableCellData>();        for (int i = 0; i < selectedRows.length; i++) {            int row = selectedRows[i];            for (int j = 0; j < selectedColumns.length; j++) {                int column = selectedColumns[j];                TimeTableCellData timeTableCellData = (TimeTableCellData) this                        .getModel().getValueAt(row, column);                if (timeTableCellData != null) {                    timeTableCellDatas.add(timeTableCellData);                }            }        }        return timeTableCellDatas;    }    protected void connectReserveManItemActionPerformed(ActionEvent e) {        List<TimeTableCellData> selectedCellDatas = getSelectedCellDataList();        Map<Integer, UserData> map = new HashMap<Integer, UserData>();        for (int i = 0; i < selectedCellDatas.size(); i++) {            TimeTableCellData timeTableCellData = selectedCellDatas.get(i);            List<UserData> userDatas = timeTableCellData.getUsers();            if (userDatas == null) {                continue;            }            for (UserData userData : userDatas) {                Integer id = userData.getId();                if (!map.containsKey(id)) {                    map.put(id, userData);                }            }        }        if (map.size() == 0) {            JOptionPane.showMessageDialog(parentFrame, "user empty!");            return;        }        Set<Integer> keySet = map.keySet();        List<UserData> userDatas = new ArrayList<UserData>();        for (Integer integer : keySet) {            UserData userData = map.get(integer);            userDatas.add(userData);        }        if (userDatas.size() == 1) {            QQConnect.chatWithQQ(userDatas.get(0).getQq());            return;        } else if (userDatas.size() > 1) {            QQConnect.show(parentFrame, userDatas);            return;        }    }    public void reserveMenuItemActionPerformed(ActionEvent e) {        List<TimeTableCellData> timeTableCellDatas = getSelectedCellDataList();        ReserveAssist reserveAssist = new ReserveAssist();        int ii = reserveAssist.showAddResrverDialog(parentFrame, "add",                timeTableCellDatas);        if (ii == ReserverDialog.OK_RESULT) {            List<TimeTableData> datas = reserveAssist.getReserverDatas();            if (datas != null && datas.size() > 0) {                if (UserStatue.checkLogin(parentFrame)) {                    ArrayList<TimeTableData> list = new ArrayList<TimeTableData>();                    UserData user = UserStatue.getCurrentUser();                    Integer id = user.getId();                    for (int i = 0; i < datas.size(); i++) {                        TimeTableData timeTableData = datas.get(i);                        timeTableData.setUserId(id);                        list.add(timeTableData.clone());                    }                    TimeTableStatue.addTimeTableDatasToServer(list);                    Map<Integer, Map<String, TimeTableCellData>> addTimeTableDatas = TimeTableStatue                            .addTimeTableDatas(datas);                    ContentTableModel contentTableModel = (ContentTableModel) getModel();                    contentTableModel.updateTimeTableData(addTimeTableDatas);                    contentTableModel.fireTableDataChanged();                }            }        }    }    private void cancelReserveMenuItemActionPerformed(ActionEvent e) {        List<TimeTableCellData> timeTableCellDatas = getSelectedCellDataList();        ReserveAssist reserveAssist = new ReserveAssist();        int result = reserveAssist.showDeleteResrverDialog(parentFrame,                "delete", timeTableCellDatas);        if (result == ReserveAssist.OK_RESULT) {            List<TimeTableData> timeTableDatas = reserveAssist                    .getReserverDatas();            TimeTableStatue.removeTimeTableDataListFromServer(timeTableDatas);            Map<Integer, Map<String, TimeTableCellData>> addTimeTableDatas = TimeTableStatue                    .removeTimeTableDataList(timeTableDatas);            ContentTableModel contentTableModel = (ContentTableModel) getModel();            contentTableModel.updateTimeTableData(addTimeTableDatas);            contentTableModel.fireTableDataChanged();        }    }    public void redefineTableHead() {        JTableHeader tableHeader = getTableHeader();        tableHeader.setFont(new Font("", Font.BOLD, 12));        tableHeader.setPreferredSize(new Dimension(20, 40));        // define head render multiRows display        MultiLineHeaderRenderer headerRenderer = new MultiLineHeaderRenderer();        TableColumnModel columnModel = getColumnModel();        for (Enumeration<?> e = columnModel.getColumns(); e.hasMoreElements(); ) {            TableColumn column = (TableColumn) e.nextElement();            column.setHeaderRenderer(headerRenderer);        }    }    public void fireTableStructureChanged() {        ContentTableModel contentTableModel = (ContentTableModel) getModel();        contentTableModel.fireTableStructureChanged();        redefineTableHead();    }}